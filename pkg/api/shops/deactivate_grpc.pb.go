// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/shops/deactivate.proto

package shops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeactivateClient is the client API for Deactivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeactivateClient interface {
	Deactivate(ctx context.Context, in *DeactivateRequest, opts ...grpc.CallOption) (*DeactivateResponse, error)
}

type deactivateClient struct {
	cc grpc.ClientConnInterface
}

func NewDeactivateClient(cc grpc.ClientConnInterface) DeactivateClient {
	return &deactivateClient{cc}
}

func (c *deactivateClient) Deactivate(ctx context.Context, in *DeactivateRequest, opts ...grpc.CallOption) (*DeactivateResponse, error) {
	out := new(DeactivateResponse)
	err := c.cc.Invoke(ctx, "/shops.Deactivate/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeactivateServer is the server API for Deactivate service.
// All implementations must embed UnimplementedDeactivateServer
// for forward compatibility
type DeactivateServer interface {
	Deactivate(context.Context, *DeactivateRequest) (*DeactivateResponse, error)
	mustEmbedUnimplementedDeactivateServer()
}

// UnimplementedDeactivateServer must be embedded to have forward compatible implementations.
type UnimplementedDeactivateServer struct {
}

func (UnimplementedDeactivateServer) Deactivate(context.Context, *DeactivateRequest) (*DeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedDeactivateServer) mustEmbedUnimplementedDeactivateServer() {}

// UnsafeDeactivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeactivateServer will
// result in compilation errors.
type UnsafeDeactivateServer interface {
	mustEmbedUnimplementedDeactivateServer()
}

func RegisterDeactivateServer(s grpc.ServiceRegistrar, srv DeactivateServer) {
	s.RegisterService(&Deactivate_ServiceDesc, srv)
}

func _Deactivate_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeactivateServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shops.Deactivate/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeactivateServer).Deactivate(ctx, req.(*DeactivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deactivate_ServiceDesc is the grpc.ServiceDesc for Deactivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deactivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shops.Deactivate",
	HandlerType: (*DeactivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deactivate",
			Handler:    _Deactivate_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shops/deactivate.proto",
}
